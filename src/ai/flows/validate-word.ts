// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Validate a word against a specific category and language using AI.
 *
 * - validateWord - A function that validates a given word.
 * - ValidateWordInput - The input type for the validateWord function.
 * - ValidateWordOutput - The return type for the validateWord function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ValidateWordInputSchema = z.object({
  word: z.string().describe('The word to validate.'),
  category: z.string().describe('The category to validate the word against.'),
  language: z.string().describe('The language of the word.'),
});
export type ValidateWordInput = z.infer<typeof ValidateWordInputSchema>;

const ValidateWordOutputSchema = z.object({
  isValid: z.boolean().describe('Whether the word is valid for the given category and language.'),
  reason: z.string().optional().describe('The reason why the word is invalid, if applicable.'),
});
export type ValidateWordOutput = z.infer<typeof ValidateWordOutputSchema>;

export async function validateWord(input: ValidateWordInput): Promise<ValidateWordOutput> {
  return validateWordFlow(input);
}

const validateWordPrompt = ai.definePrompt({
  name: 'validateWordPrompt',
  input: {schema: ValidateWordInputSchema},
  output: {schema: ValidateWordOutputSchema},
  prompt: `You are a word validation expert. Your task is to determine if a given word is valid for a specific category and language.

Word: {{{word}}}
Category: {{{category}}}
Language: {{{language}}}

Determine if the word is a valid example of the category in the given language. If it is, return isValid as true. If it is not, return isValid as false and provide a reason.

Consider the following:
- Spelling in the given language.
- Meaning in the given language.
- Relevance to the category.
- Common usage in the given language.

Respond in a JSON format.`,
});

const validateWordFlow = ai.defineFlow(
  {
    name: 'validateWordFlow',
    inputSchema: ValidateWordInputSchema,
    outputSchema: ValidateWordOutputSchema,
  },
  async input => {
    const {output} = await validateWordPrompt(input);
    return output!;
  }
);
